//ExportAllStoriesCS2PDF.js//An InDesign CS JavaScript////Exports all stories in an InDesign document in a specified text format.////For more on InDesign scripting, go to http://www.adobe.com/products/indesign/scripting.html//or visit the InDesign Scripting User to User forum at http://www.adobeforums.com//myRootFolder = "/Kommuni/LaRe/332478_SE/"myFolder= myRootFolder + "1 - Sid 3-106/1Anlänt/";//~ var myMellanslagBortScriptFile = new File (app.activeScript.path + '/MellanslagBort.jsx');//~ var myLaReUntagScriptFile = new File (app.activeScript.path + '/LaReUntag.jsx');app.scriptPreferences.userInteractionLevel = UserInteractionLevels.interactWithAll;//myFolder= Folder.selectDialog ("Choose folder for export");//Get array with files in export foldervar mySourceFolder;var myFiles = Folder( myFolder ).getFiles( '*.indd' );//Check if there are files in export folder				if(myFiles.length == 0) {	alert("No files in the export folder. Exiting.");	exit();}myFolderPath = myFolder.fullName +"/";//alert(myFolderPath);re = /\/\d{6}\//;myJobbnummer = "332478";	myExportFormat = 3;    missingFontFlag = false;	//Set name for temporary file	myDate = new Date();	myDateHours = myDate.getHours();	if(myDateHours<10){		myHours = myDateHours + "";		myHours = "0" + myHours;	}else{		myHours = myDateHours + "";	}	myDateMinutes = myDate.getMinutes();	if(myDateMinutes<10){		myMinutes = myDateMinutes + "";		myMinutes = "0" + myMinutes;	}else{		myMinutes = myDateMinutes + "";	}	myDate = myDate.toLocaleDateString();	myTime = myHours.concat(myMinutes);    myMissingFontFileName = myRootFolder + "Missing Fonts/MissingFonts_" + myDate + "_" + myTime + ".txt"    var myTotalMissingFontsFile = new File(myMissingFontFileName);    myTotalMissingFontsFile.open("w", undefined, undefined);    myTotalMissingFontsFile.encoding = "UTF8";//myJobbnummerArray = myFolderPath.match(re);//alert(myJobbnummerArray);//myPicturesFlag = confirm("Do you want to export pictures of spreads for context and/or validation?");myPicturesFlag = true;//~ if(myPicturesFlag)//~ {//~     if(myJobbnummerArray == null)//~     {//~         alert("Sˆkv‰gen mÂste innehÂlla en jobbnummermapp. Avbryter.");//~         exit();//~     }else{//~         myJobbnummer = myJobbnummerArray[myJobbnummerArray.length - 1].slice(1,myJobbnummerArray[myJobbnummerArray.length - 1].length-1);//~     }//~ }// start file opener loop (open each file, then export all stories in each document to .incx text file			for(myFileCounter = 0; myFileCounter < myFiles.length; myFileCounter++){	app.scriptPreferences.userInteractionLevel = UserInteractionLevels.neverInteract;	app.open(myFiles[myFileCounter], true);    var usedFonts = app.activeDocument.fonts;    var missingFonts = new Array();    var myTypeList = Array();    for(var i = 0; i < usedFonts.length; i++){    if((usedFonts[i].status != FontStatus.INSTALLED)&&(usedFonts[i].name!="Arial (TT)	Bold")){		  missingFonts.push(usedFonts[i]);	  }//	  alert(usedFonts[i].version + "    " + usedFonts[i].name);	  $.writeln(usedFonts[i].name + "    " + usedFonts[i].postscriptName);    }		//Stop if there are no stories	if (app.activeDocument.stories.length != 0)    {		var docRef = app.activeDocument;         myNr = new Number( docRef.name.slice(11, 15));        var myFolders = Folder( myRootFolder ).getFiles( '* - Sid*' );        for(myFolderCounter = 0; myFolderCounter <myFolders.length; myFolderCounter++)        {             mySubFolder = myFolders[myFolderCounter];			$.writeln(mySubFolder);            myFirstArkPos = mySubFolder.name.indexOf("S");            myMiddleArkPos = mySubFolder.name.indexOf("-", myFirstArkPos);            myLowNo = new Number(mySubFolder.name.slice(myFirstArkPos +6, myMiddleArkPos));            myHighNo = new Number(mySubFolder.name.slice(myMiddleArkPos + 1));            if((myNr>=myLowNo)&&(myNr<=myHighNo)) break;        }    //alert("Det finns " + missingFonts.length + " saknade fonter");        if(missingFonts.length==0)        {            app.activeDocument.save(File(mySubFolder.fullName + "/1Anlänt/" + docRef.name));            app.activeDocument.printPreferences.printer = "RICOH Aficio MP C3001 [00267336E8A0]";            app.activeDocument.printPreferences.paperSize = "A3";            app.activeDocument.printPreferences.scaleMode = 1935897702;     //SCALE_TO_FIT            app.activeDocument.printPreferences.copies = 1;             app.activeDocument.printPreferences.printPageOrientation = 2003395685; 	//LANDSCAPE			            app.activeDocument.print(false);                    }else{            app.activeDocument.save(File(mySubFolder.fullName + "/1Anlänt inga typsnitt/" + docRef.name));		   app.activeDocument.printPreferences.printer = "RICOH Aficio MP C3001 [00267336E8A0]";            app.activeDocument.printPreferences.paperSize = "A3";            app.activeDocument.printPreferences.scaleMode = 1935897702;     //SCALE_TO_FIT            app.activeDocument.printPreferences.copies = 1;             app.activeDocument.printPreferences.printPageOrientation = 2003395685; 	//LANDSCAPE			            app.activeDocument.print(false);		var myMissingFontsFile = new File(mySubFolder.fullName + "/1Anlänt inga typsnitt/" + docRef.name +".txt");            myMissingFontsFile.open("w", undefined, undefined);            myMissingFontsFile.encoding = "UTF8";            myTotalMissingFontsFile.writeln(app.activeDocument.name);	$.writeln("1");            for(var missingFontCounter = 0; missingFontCounter < missingFonts.length; missingFontCounter++)            {                //alert(missingFonts[missingFontCounter].name);                myMissingFontsFile.writeln(missingFonts[missingFontCounter].name);                myTotalMissingFontsFile.writeln(missingFonts[missingFontCounter].name);            }	$.writeln("2");            myMissingFontsFile.close();               missingFontFlag = true;        }		var spreadPage = docRef.spreads.firstItem();  		myLayers = new Array; 		myLayersCheck = new Array;		$.writeln("3");			//Create arrays with layer name and lock status 		for(myCounter = 0; myCounter <app.activeDocument.layers.length; myCounter++)        { 			myLayer = app.activeDocument.layers.item(myCounter); 			myLayers.push(myLayer.name);			myLayersCheck.push(myLayer.locked); 				$.writeln("4");		} 		app.activeDocument.layers.itemByName("comment").locked = true;				        //Dialog to choose a folder        //myFolder= Folder.selectDialog ("Choose a Folder");        //Stop if no folder is selected or if there are no stories in the document        if((myFolder != null)&&(app.activeDocument.stories.length !=0))        {					            //Call function to delete all hyperlinks            //myDeleteHyperlinks(myFolder);         if(myPicturesFlag)         {	$.writeln("5");            var myBildFolder = new Folder("/virtualdirs/public/xml-validation/" + myJobbnummer);            var mySourceFolder = new Folder("/xml-validation/" + myJobbnummer);	$.writeln("6");//            mySourceFolder = new Folder(myXMLFolder + "\\source\\");             myBildFolder.create();	$.writeln("7"); //            myXMLFolder.create();             mySourceFolder.create();	$.writeln("8");        }                        //Call function to export all stories            //tidtagning start            myTimer=new Date;            myStartTime=myTimer.getTime();	            myExportAllStories(myExportFormat, myRootFolder, mySubFolder);            //tidtagning stopp                          myTimer2=new Date;            myStopTime=myTimer2.getTime();	            //alert("klar pÂ " + ((myStopTime-myStartTime)/1000) + " sek.");            //Create a PDF file	$.writeln("9");            					app.activeDocument.exportFile("Adobe PDF", File(mySubFolder .fullName+ "/2Utflödat/pdf/" + app.activeDocument.name + ".pdf"), false);					//app.activeDocument.exportFile("Adobe PDF", File("/FTP_Customers/Suppliers/from kommunicera/From GE/LaRe PDF/" + app.activeDocument.name + ".pdf"), false);                      app.activeDocument.save(File(mySubFolder.fullName + "/2Utflödat/" + docRef.name));         if(myPicturesFlag)         {            myLastPos = app.activeDocument.name.lastIndexOf(".") ;            myName =  app.activeDocument.name.slice(0, myLastPos);            app.jpegExportPreferences.jpegExportRange = ExportRangeOrAllPages.EXPORT_RANGE;                        //Repeat for all spreads in the document            for(mySpreadCounter = 0; mySpreadCounter < app.activeDocument.spreads.length; mySpreadCounter++){                mySpread = app.activeDocument.spreads[mySpreadCounter];                myFirstPage = mySpread.pages.item(0);                myLastPage = mySpread.pages.item(mySpread.pages.length-1);                myFirstPageNo = myFirstPage.name;                myLastPageNo = myLastPage.name;                //alert(myFirstPageNo + "-" +  myLastPageNo);                app.jpegExportPreferences.pageString = myFirstPageNo + "-" +  myLastPageNo;         //         alert(myFolder +"/" + app.activeDocument.name + "_Spread_" + mySpreadCounter + ".jpg");                 app.activeDocument.exportFile(ExportFormat.JPG,File(myBildFolder.fullName + "/" + app.activeDocument.name + "_Spread_" + mySpreadCounter + ".jpg"));                               }          }                        //end of export of single file, change preferences and save file            app.activeDocument.textPreferences.highlightCustomSpacing=0;            app.activeWindow.screenMode = ScreenModeOptions.previewOff;            app.activeWindow.overprintPreview = false;            app.activeDocument.save();        }	}else{		alert("The document does not contain any text. Please open a document containing text and try again.");	}myTotalMissingFontsFile.close();if(missingFontFlag == false){    //    myTotalMissingFontsFile.remove();}else{    //alert("Det saknas teckensnitt. Se filen\n" + myTotalMissingFontsFile.displayName + "\ni mappen\n" + myFolder);}//--end of export of single file, update and close file	//update KAB Document info//~ 	#include "KAB Document info/KABDocumentInfo_main.jsx"//~ 	updateKABDocumentInfo("KABDoc status","Exported");//... aaand close file    app.activeDocument.close(SaveOptions.yes,myFiles[myFileCounter]);        myFiles[myFileCounter].remove();	// end of file opener loop}//myExportStories function takes care of exporting the stories.//myExportFormat is a number from 0-3, where 0 = text only, 1 = rtf, 2 = tagged text and 3 = InCopy.//myFolder is a reference to the folder in which you want to save your files.//myTotFile is the text file to which the stories will be written//function myExportAllStories(myFolder, mySourceFolder){function myExportAllStories(myExportFormat, myRootFolder, mySubFolder){	myID = 0;	tableCount = 0;	myFileSize = 0;	fileCount = 1;//	var myTotFile = new File(myFolder +"/" + app.activeDocument.name + "_" + fileCount + "_Part.icml");	var myTotFile = new File(mySubFolder.fullName+"/2Utflödat/icml/" + app.activeDocument.name + "_" + fileCount + "_Part.xml");				//Open it for editing	myTotFile.open("e", undefined, undefined);			//Set the encoding to Unicode	myTotFile.encoding = "UTF8";    myTotFile.lineFeed="Unix";	myTotFile.writeln("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")	myTotFile.writeln("<KAB_Root>");//~ 	for(myCrossReferenceFormatsCounter = 0; myCrossReferenceFormatsCounter < app.activeDocument.crossReferenceFormats.length; myCrossReferenceFormatsCounter++){//~ 		myCrossReferenceFormat = app.activeDocument.crossReferenceFormats.item(myCrossReferenceFormatsCounter);//~ 		myTotFile.writeln("<KAB_CrossReference ID=\"" + myCrossReferenceFormat.id + "\">");//~ 		for(myBuildingBlocksCounter = 0; myBuildingBlocksCounter < myCrossReferenceFormat.buildingBlocks.length; myBuildingBlocksCounter++){//~ 			myBuildingBlock = myCrossReferenceFormat.buildingBlocks.item(myBuildingBlocksCounter);//~ 			myTotFile.writeln("<KAB_BuildingBlock>" + myBuildingBlock.customText + "</KAB_BuildingBlock>");//~ 		}//~ 		myTotFile.writeln("</KAB_CrossReference>");			//~ 	}		//Disable linking when importing text files	app.activeDocument.textPreferences.linkTextFilesWhenImporting = false;     //app.jpegExportPreferences.exportingSpread = true;     //app.activeDocument.exportFile(ExportFormat.JPG,File(myFolder +"/" + app.activeDocument.name + "_Spread_" + ".jpg"));  	mySpreads = new Array;	for(mySpreadCounter = 0; mySpreadCounter < app.activeDocument.spreads.length; mySpreadCounter++){		mySpreads.push(app.activeDocument.spreads.item(mySpreadCounter));	}	for(myMasterSpreadCounter = 0; myMasterSpreadCounter < app.activeDocument.masterSpreads.length; myMasterSpreadCounter++){		mySpreads.push(app.activeDocument.masterSpreads.item(myMasterSpreadCounter));	}		  	for(mySpreadCounter = 0; mySpreadCounter < mySpreads.length; mySpreadCounter++){		//Ungroup all groups in the current spread        mySpread = mySpreads[mySpreadCounter];        myFirstPage = mySpread.pages.item(0);        myLastPage = mySpread.pages.item(mySpread.pages.length-1);		while(mySpread.groups.length>0){			mySpread.groups[0].ungroup();			}					//Repeat for all text frames in the spread		for(myCounter = 0; myCounter < mySpread.textFrames.length; myCounter++){						//Get text frame			myFrame = mySpread.textFrames.item(myCounter);						//Continue if it is the first frame in a text chain and if it is unlocked			if ((myFrame.textFrameIndex == 0)&&(myFrame.itemLayer.locked == false)){								//Get the story of the text frame				myStory = myFrame.parentStory;				//alert("y1 = " +  Math.round(myFirstPage.bounds[0]) + " x1 = " +  Math.round(myFirstPage.bounds[1]) + " y2 = " + Math.round(myFirstPage.bounds[2]) + " x2 = " +  Math.round(myFirstPage.bounds[3]));				//alert("y1 = " +  Math.round(myLastPage.bounds[0]) + " x1 = " +  Math.round(myLastPage.bounds[1]) + " y2 = " + Math.round(myLastPage.bounds[2]) + " x2 = " +  Math.round(myLastPage.bounds[3]));				//alert("y1 = " +  Math.round(myFrame.geometricBounds[0]) + " x1 = " +  Math.round(myFrame.geometricBounds[1]) + " y2 = " + Math.round(myFrame.geometricBounds[2]) + " x2 = " +  Math.round(myFrame.geometricBounds[3]));                myFrameY1 =  Math.round(myFrame.geometricBounds[0]);                myFrameX1 =  Math.round(myFrame.geometricBounds[1]);                myFrameY2 =  Math.round(myFrame.geometricBounds[2]);                myFrameX2 =  Math.round(myFrame.geometricBounds[3]);                mySpreadWidth = Math.round(myLastPage.bounds[3]);                mySpreadHeight = Math.round(myFirstPage.bounds[2]);                //alert(myY1 + ", " + myX1 + ", " + myY2 + ", " + myX2);                //alert("\r\n" + myFrame.geometricBounds);				//Unlink current text files from the story				try {					myStory.itemLink.unlink();				} catch(e) {				} 											//Save previous story ID				myOldID = myID;								//Get current story ID				myID = myStory.id;								//set the label of the story to its ID				myStory.label = myID.toString();				                    myFormat = ExportFormat.INCOPY_MARKUP;                    myExtension = ".icml"																		//??					myFileName = "StoryID" + myID + myExtension;									//Get path to temporary folder					tempFolder = Folder.myDocuments;					//Set name for temporary file					myFilePath = tempFolder + "/temp" + myExtension;									//Create temporary file					myFile = new File(myFilePath);								//Commented lines below creating hyperlinks and hyperlinkDestinations (PDF-RTF solution)				//Add a hyperlink to the text frame pointing to the rtf file				//myLink = docRef.hyperlinkURLDestinations.add(app.activeDocument.name + ".doc#StoryID" + myID);				//source = docRef.hyperlinkPageItemSources.add(myFrame);				//hyperlink = docRef.hyperlinks.add(source, myLink);								//Add a hyperlink destination to the story				//myDestination = docRef.hyperlinkTextDestinations.add(myStory.texts);				//myDestination.name = "Destination" + myID;									//Export the story to the temporary file					myStory.exportFile(myFormat, myFile);									//Unlink the temporary file					myStory.itemLink.unlink();									//Open the temporary file for reading...					myFile.open("r",undefined, undefined);					//in Unicode					myFile.encoding = "UTF8";					myFile.lineFeed="Unix";					if(myFrame.label == "Translated"){						myStatus = "Translated";					}else{						myStatus = "Not translated";											}									//Write story header to the end of the text file                    myUrl = "http://www.kommunicera.se/xml/edit/" + myJobbnummer + "/" +app.activeDocument.name + "_" + fileCount + "_Part.xml?id=" + myID;					myTotFile.writeln("<KAB_Story ID=\"" + myID  + "\" Status=\"" + myStatus + "\" Url=\"&lt;a target='_blank' href='" + myUrl + "'&gt;" +myUrl + "&lt;/a&gt;\" PictureName=\"" + app.activeDocument.name +                    "_Spread_" + mySpreadCounter + ".jpg\" SpreadWidth=\"" + mySpreadWidth + "\" SpreadHeight=\"" + mySpreadHeight + "\" y1=\"" + myFrameY1 + "\" x1=\"" + myFrameX1 + "\" y2=\"" + myFrameY2 + "\" x2=\"" + myFrameX2 + "\">");										myRad = myFile.readln();					re = /^\t/g;//                       re2 = /^\d[\d|\.|\,]*[\d|\.|\,]$/;					//alert(myTempRad);					while(myFile.eof == false){                        myTempRad = myRad.replace(re,"");//~ 						myTempRad = myTempRad.substring(0,9);						if(((myTempRad.substring(0,9)  == "<Content>")||(myTempRad == "<Br/>")||(myTempRad == "<Br />")||(myTempRad == "</Cell>"))||(myTempRad.substring(0,7) == "<Topic ")||(myTempRad == "</Topic>")){							if(myTempRad=="</Cell>"){								myTotFile.writeln("<Cell />");							}else{                                    if(myTempRad.substring(0,9)  == "<Content>"){                                        //myXXXString = "123";                                        var myXXXString = new String(myTempRad.substring(9,myTempRad.length - 10));                                        //var myXXXString = new String("123");                                        //alert(myXXXString);                                        //re2 = /^\d[\d|\.|\,|-]*[\d|\.|\,|-]$/;//förra ersättningen. Letar efter siffror, streck (minus), whitespace och snedstreck. //~                                         re2 = /^[\d|\-|\s|\/]+$/;//nya ersättningen. Letar även efter punkt.										re2 = /^[\d|\-|\.|\s|\/]+$/;                                        //myXXXNo = myXXXString.search(re2);                                         //alert(myXXXNo);//OBS!                                                                                 if(!((myXXXString.search(re2) == 0)||(myTempRad.substring(9,myTempRad.length - 10)=="<?ACE 18?>"))){                                        //if(!((myTempRad.substring(9,myTempRad.length - 10)=="<?ACE 18?>"))){										//alert(myStatus);										if(myStatus == "Translated")										{											myTempRad = "<Content Status=\"Translated\">" + myTempRad.substring(9);											myTotFile.writeln(myTempRad);										}else{											myTotFile.writeln(myTempRad);										}                                                                                  }                                     }else{                                        myTotFile.writeln(myTempRad);                                     }                                }						}//                   //~ 						while((myTempRad != "<Content>")&&(myFile.eof == false)){//~ 							myRad = myFile.readln();//~ 							myTempRad = myRad.replace(re,"");//~ 							myTempRad = myTempRad.substring(0,20);//~ 						}//~ 						//alert(myTempRad);//~ 						if(myFile.eof == false){//~ 							while(myTempRad != "</ParagraphStyleRange>"){//~ 									myTotFile.writeln(myRad);//~ 									myRad = myFile.readln();//~ 									myTempRad = myRad.replace(re,"");//~ 									myTempRad = myTempRad.substring(0,22);//~ 							}//~ 							myTotFile.writeln(myRad);							myRad = myFile.readln();						//}					}					myTotFile.writeln("</KAB_Story>");							//Close the temporary file					myFile.close();//					myFileSize = myFileSize + myFile.length;					myFile.remove();					if(myTotFile.length > 2000000){						//Close the text file						myTotFile.writeln();						myTotFile.close();						fileCount++;                        var myTotFile = new File(mySubFolder.fullName +"/2Utflödat/icml/" + app.activeDocument.name + "_" + fileCount + "_Part.xml");									//Open it for editing						myTotFile.open("e", undefined, undefined);														//Set the encoding to Unicode						myTotFile.encoding = "UTF8";                        myTotFile.lineFeed="Unix";						myFileSize = 0;					}				//}							}		}        myFile.close();	}			//Revert layers to original lock status	for(myLayerCounter = 0; myLayerCounter <app.activeDocument.layers.length; myLayerCounter++){ 		myLayer = app.activeDocument.layers.item(myLayerCounter); 		myLayer.locked = myLayersCheck[myLayerCounter]; 	}		//Close the text file		myTotFile.writeln("</KAB_Root>");							myTotFile.writeln();		myTotFile.close();	myTotFile.open("r", undefined, undefined);				//Set the encoding to Unicode	myTotFile.encoding = "UTF8";    myTotFile.lineFeed="Unix";	myFileString = myTotFile.read();	myTotFile.close();	    myTotFile.remove();	re2 = /\u2009/g;	re3 = /\u2008/g;	re4 = /\u202F/g;	re5 = /\uE02D/g;	re6 = /\u8197/g;	re7 = /\u8198/g;	re8 = /<\/Content>\n<Content>/g;	re9 = /\u2028/g;    re10 = /\uF0A1/g;    re11 = /\uF0A2/g;    re11 = /\uF0A2/g;    re12 = /\t/g;	myFileString = myFileString.replace(re2,"<thinspace />");	myFileString = myFileString.replace(re3,"<pspace />");	myFileString = myFileString.replace(re4,"<nbsp_fixwidth />");	myFileString = myFileString.replace(re5,"<sphyphen />");	myFileString = myFileString.replace(re6,"<quarterspace />");	myFileString = myFileString.replace(re7,"<sixthspace />");	myFileString = myFileString.replace(re8,"<KAB_internal mytag=\"&lt;/Content&gt;&lt;Content&gt;\" />");	myFileString = myFileString.replace(re9,"<linebreak />");	myFileString = myFileString.replace(re10,"<uF0A1 />");    myFileString = myFileString.replace(re11,"<uF0A2 />");    myFileString = myFileString.replace(re12,"<tab />");	var myNewFile = new File(myFolder +"/" + app.activeDocument.name + "_" + fileCount + "_Part.xml");	myNewFile.open("w", undefined, undefined);				//Set the encoding to Unicode	myNewFile.encoding = "UTF8";    myNewFile.lineFeed="Unix";	myNewFile.write(myFileString);	myNewFile.close();		var myNewerFile = new File(myFolder +"/" + app.activeDocument.name + "_" + fileCount + "_New.xml");	myNewerFile.open("w", undefined, undefined);	myNewerFile.encoding = "UTF8";    myNewerFile.lineFeed="Unix";	myNewFile.open("r", undefined, undefined);	myNewFile.encoding = "UTF8";    myNewFile.lineFeed="Unix";	myRange = myNewFile.readln();	myNewerFile.writeln(myRange);	myRange = myNewFile.readln();	myNewerFile.writeln(myRange);	myRange = myNewFile.readln();	while(myRange != "</KAB_Root>"){		if(!((myRange.substr(0,14) == "<KAB_Story ID=") || (myRange == "<Br/>"))){			myFoundCount = myRange.split("<KAB_internal mytag=\"&lt;/Content&gt;&lt;Content&gt;\" />").length;			if(!((Math.round(myFoundCount/2) - myFoundCount/2) == 0)){				for(myCounter = 1; myCounter < ((myFoundCount/2)+1); myCounter++){					re = /<KAB_internal mytag="&lt;\/Content&gt;&lt;Content&gt;" \/>/;					myRange = myRange.replace(re,"<KAB_internTag>");					myRange = myRange.replace(re,"</KAB_internTag>");				}				myNewerFile.writeln(myRange);			}else{				re = /<Content>/;				myRange = myRange.replace(re,"<Content><KAB_Start/>");				re = /<\/Content>/;				myRange = myRange.replace(re,"<KAB_End/></Content>");				re = /<KAB_internal mytag="&lt;\/Content&gt;&lt;Content&gt;" \/>/g;				myRange = myRange.replace(re,"<KAB_Middle/>");				myNewerFile.writeln(myRange);			}		}else{			myNewerFile.writeln(myRange);		}		myRange = myNewFile.readln();	}	myNewFile.close();    myNewFile.remove();	myNewerFile.writeln("</KAB_Root>");	myNewerFile.close();	myNewerFile.open("r", undefined, undefined);	myNewerFile.encoding = "UTF8";    myNewerFile.lineFeed="Unix";    myMatchString=myNewerFile.read();    re=/<KAB_Story ID=(.|\n)*?<\/KAB_Story>/g;    var myMatchArray = myMatchString.match(re);    for(myMatchCounter =myMatchArray.length-1; myMatchCounter >=0; myMatchCounter--){         myString = myMatchArray[myMatchCounter];        myRowNo = 0;       // alert(myString);       if((myString.indexOf("<Content") ==-1)&&(myString.indexOf("<Topic ") ==-1)){           myMatchArray.splice(myMatchCounter,1);        }else{            while((myString.indexOf("<Content>") !=-1)||(myString.indexOf("<Content Status") !=-1)){                myString = myString.replace("<Content>","<Content RowNo=\"" + myRowNo + "\">");                myString = myString.replace("<Content Status=\"Translated\">","<Content RowNo=\"" + myRowNo + "\" Status=\"Translated\">");                myMatchArray[myMatchCounter] = myString;                myRowNo++;				$.writeln(myRowNo);                                }        }    }    myNewerFile.close();    myNewerFile.remove();    var myFinalFile = new File(mySubFolder.fullName +"/2Utflödat/icml/" + app.activeDocument.name + "_" + fileCount + "_Part.xml");    myFinalFile.open("w", undefined, undefined);	myFinalFile.encoding = "UTF8";    myFinalFile.lineFeed="Unix";	myFinalFile.writeln("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")	myFinalFile.writeln("<KAB_Root SourceFile=\"" + myFinalFile.fullName + "\">");    myFinalFile.write(myMatchArray.join("\n"));	myFinalFile.writeln("\n</KAB_Root>");     myFinalFile.close();				 	 	     var myNewFile = new File(mySourceFolder + "/" + app.activeDocument.name + "_" + fileCount + "_Part.xml");    myFinalFile.copy(myNewFile);    var mySourceFile = new File(mySourceFolder + "/" + app.activeDocument.name + "_" + fileCount + "_source.xml");    myFinalFile.copy(mySourceFile);    var myTotFile = new File(myRootFolder + "translation to/" + app.activeDocument.name + "_" + fileCount + "_Part.xml");    myFinalFile.copy(myTotFile);}//Deletes all hyperlinks in the documentfunction myDeleteHyperlinks(myFolder) {	if (app.activeDocument.hyperlinks.length != 0){		alert("Document contain " + app.activeDocument.hyperlinks.length + " hyperlinks that will be deleted!");	}	try {	app.activeDocument.hyperlinkTextDestinations.everyItem().remove();	}	catch(e) {	}	try {		app.activeDocument.hyperlinkTextSources.everyItem().remove();	}	catch(e) {	}	try {		app.activeDocument.hyperlinkURLDestinations.everyItem().remove();	}	catch(e) {	}	}			